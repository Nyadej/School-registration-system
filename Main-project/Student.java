import java.util.Scanner;

public class Student {
    private String firstName;
    private String lastName;
    private int yearGroup;
    private int studentID;
    private String course;
    private int studentFinance = 9000;
    private static int accomodationCost = 600; // static because it’s a constant that does not change per student
    private static int idCounter = 1001; // Static counter for unique student IDs
    private int studentLoan;
    private int loanBalance;

    public Student(Scanner scanner) {
        System.out.println("Enter the student's first name: ");
        this.firstName = scanner.nextLine();

        System.out.println("Enter the student's last name: ");
        this.lastName = scanner.nextLine();

        // TODO - create InputMismatchException
        System.out.println("What year is the student in?: ");
        this.yearGroup = scanner.nextInt(); // Method reads and returns the next token (e.g., an integer) from the input. When you use nextInt(), the method reads the integer but leaves the newline character generated by pressing <Enter> in the input stream. 
        scanner.nextLine(); // This method reads and returns the entire line of input, including everything up to the newline character. Consumes the leftover newline character, ensuring that the next nextLine() call will wait for the user to input new data.
        // If you call nextLine() right after nextInt() without handling the leftover newline, nextLine() will immediately return an empty string because it reads the leftover newline character.

        // Generate unique student ID
        setStudentID();

        System.out.println(firstName + " " + lastName + '\n' + yearGroup + "th year" + '\n' + "Student ID = " + studentID + '\n' + "Welcome  👋"); 

    }

    public Integer getStudentID() {
        return studentID;
    }

     // Generate ID
     private void setStudentID() {
        // this.StudentID = studentID++; has been replaced with this.studentID = idCounter++; to properly assign a unique student ID.
        this.studentID = idCounter++; // Increment the static counter and assign to studentID
    }

    // Enroll in courses
    public void enroll(Scanner scanner) {

        System.out.println("What courses would you like to register for? (Q to quit): ");
        String course = scanner.nextLine().toLowerCase();

        switch (course) {
            case "medicine":
                System.out.println("You have successfully registered for the " +  course + " course, for this year. Good luck! 🩺");
                break;
            case "computer science":
                studentFinance = studentFinance + accomodationCost;
                System.out.println("You have successfully registered for the " + course + " course, for this year. Good luck! 💻");
                break;
            case "law":
                studentFinance = studentFinance + accomodationCost;
                System.out.println("You have successfully registered for the " + course + " course, for this year. Good luck! 📚");
                break;
            case "finance":
                studentFinance = studentFinance + accomodationCost;
                System.out.println("You have successfully registered for the " +  course + " course, for this year. Good luck! 🏦");
                break;
            case "engineering":
                studentFinance = studentFinance + accomodationCost;
                System.out.println("You have successfully registered for the " + course + " course, for this year. Good luck! 🏗️");
                break;
            case "q":
                System.out.println("You have left the programme.");
                return; // Exit the method here if the user chooses to quit
            default: 
                System.out.println("You haven't selected any courses.");
                return; // Exit the method here if an invalid course is selected
        }   

        studentLoan = (studentFinance * yearGroup) + (accomodationCost * yearGroup);
        loanBalance = studentLoan; // **Set initial loan balance
        System.out.println("Your total student loan is " + "£" + studentLoan);
        
    }

    // make payment
    public void makePayment(Scanner scanner) { 
        
    System.out.print("Would you like to make a payment today? (Y/N): ");
    String response = scanner.nextLine().toLowerCase(); 
    
        if (response.equals("y")) {
            System.out.print("How much would you like to pay today?: ");
            int payment = scanner.nextInt(); // Get the payment amount from the user
            loanBalance = loanBalance - payment;
            System.out.println("Thank you for your payment of £" + payment + " 👍");
            checkBalance(); // Show the updated balance
        } else {
            System.out.println("No payment made today " + firstName + ". 🙂");
        }
    }

    // View balance
    public void checkBalance() {
        System.out.println("Your balance is: £" + loanBalance + '\n' + "A receipt has been sent to your email! 🧾"); // **Display current loan balance
    }
} 

    // Show status

